(window.webpackJsonp=window.webpackJsonp||[]).push([[445],{929:function(s,t,a){"use strict";a.r(t);var e=a(35),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"working-with-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#working-with-lists"}},[s._v("#")]),s._v(" Working with lists")]),s._v(" "),a("h2",{attrs:{id:"creating-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-lists"}},[s._v("#")]),s._v(" Creating lists")]),s._v(" "),a("p",[s._v("A list is an ordered collection of values.\nYou can create a "),a("code",[s._v("list")]),s._v(" with square brackets, surrounded values separated by spaces and/or commas (for readability).\nFor example, "),a("code",[s._v("[foo bar baz]")]),s._v(" or "),a("code",[s._v("[foo, bar, baz]")]),s._v(".")]),s._v(" "),a("h2",{attrs:{id:"updating-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-lists"}},[s._v("#")]),s._v(" Updating lists")]),s._v(" "),a("p",[s._v("You can "),a("code",[s._v("update")]),s._v(" and "),a("code",[s._v("insert")]),s._v(" values into lists as they flow through the pipeline, for example let's insert the value "),a("code",[s._v("10")]),s._v(" into the middle of a list:")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("> [1, 2, 3, 4] | insert 2 10\n")])])]),a("p",[s._v("We can also use "),a("code",[s._v("update")]),s._v(" to replace the 2nd element with the value "),a("code",[s._v("10")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("> [1, 2, 3, 4] | update 1 10\n")])])]),a("p",[s._v("In addition to "),a("code",[s._v("insert")]),s._v(" and "),a("code",[s._v("update")]),s._v(", we also have "),a("code",[s._v("prepend")]),s._v(" and "),a("code",[s._v("append")]),s._v(". These let you insert to the beginning of a list or at the end of the list, respectively.")]),s._v(" "),a("p",[s._v("For example:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("yellow green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" prepend red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" append purple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [red yellow green purple]")]),s._v("\n")])])]),a("h2",{attrs:{id:"iterating-over-lists"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iterating-over-lists"}},[s._v("#")]),s._v(" Iterating over lists")]),s._v(" "),a("p",[s._v("To iterate over the items in a list, use the "),a("RouterLink",{attrs:{to:"/book/commands/each.html"}},[a("code",[s._v("each")])]),s._v(" command with a "),a("RouterLink",{attrs:{to:"/book/types_of_data.html#blocks"}},[s._v("block")]),s._v("\nof Nu code that specifies what to do to each item. The block parameter (e.g. "),a("code",[s._v("|it|")]),s._v(" in "),a("code",[s._v("{ |it| echo $it }")]),s._v(") is normally the current list item, but the "),a("code",[s._v("--numbered")]),s._v(" ("),a("code",[s._v("-n")]),s._v(") flag can change it to have "),a("code",[s._v("index")]),s._v(" and "),a("code",[s._v("item")]),s._v(" values if needed. For example:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Mark Tami Amanda Jeremy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$names")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" each "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, ('),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(')!"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Outputs "Hello, Mark!" and three more similar lines.')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$names")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" each -n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" $"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"('),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(".index + 1) - ("),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v('.item)"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Outputs "1 - Mark", "2 - Tami", etc.')]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/where.html"}},[a("code",[s._v("where")])]),s._v(" command can be used to create a subset of a list, effectively\nfiltering the list based on a condition.")],1),s._v(" "),a("p",[s._v('The following example gets all the colors whose names end in "e".')]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("red orange yellow green blue purple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" where "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str ends-with "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),a("p",[s._v("In this example, we keep only values higher than "),a("code",[s._v("7")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The block passed to where must evaluate to a boolean.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This outputs the list [orange blue purple].")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" scores "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" where "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [10 8]")]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/reduce.html"}},[a("code",[s._v("reduce")])]),s._v(" command computes a single value from a list.\nIt uses a block which takes 2 parameters: the current item (conventionally named "),a("code",[s._v("it")]),s._v(") and an accumulator\n(conventionally named "),a("code",[s._v("acc")]),s._v("). To specify an initial value for the accumulator, use the "),a("code",[s._v("--fold")]),s._v(" ("),a("code",[s._v("-f")]),s._v(") flag.\nTo change "),a("code",[s._v("it")]),s._v(" to have "),a("code",[s._v("index")]),s._v(" and "),a("code",[s._v("item")]),s._v(" values, add the "),a("code",[s._v("--numbered")]),s._v(" ("),a("code",[s._v("-n")]),s._v(") flag.\nFor example:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" scores "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"total ="')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" reduce "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it, acc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$acc")]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 15")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"total ="')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" math "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# easier approach, same result")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"product ="')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" reduce --fold "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it, acc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$acc")]),s._v(" * "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 96")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" reduce -n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it, acc"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$acc")]),s._v(" + "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(".index * "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(".item "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3 + 1*8 + 2*4 = 19")]),s._v("\n")])])]),a("h2",{attrs:{id:"accessing-the-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accessing-the-list"}},[s._v("#")]),s._v(" Accessing the list")]),s._v(" "),a("p",[s._v("To access a list item at a given index, use the "),a("code",[s._v("$name.index")]),s._v(" form where "),a("code",[s._v("$name")]),s._v(" is a variable that holds a list.")]),s._v(" "),a("p",[s._v("For example, the second element in the list below can be accessed with "),a("code",[s._v("$names.1")]),s._v(".")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Mark Tami Amanda Jeremy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$names")]),s._v(".1 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# gives Tami")]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/length.html"}},[a("code",[s._v("length")])]),s._v(" command returns the number of items in a list.\nFor example, "),a("code",[s._v("[red green blue] | length")]),s._v(" outputs "),a("code",[s._v("3")]),s._v(".")],1),s._v(" "),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/empty.html"}},[a("code",[s._v("empty?")])]),s._v(" command determines whether a string, list, or table is empty.\nIt can be used with lists as follows:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("red green blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" empty? "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" empty? "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n")])])]),a("p",[s._v("The "),a("code",[s._v("in")]),s._v(" and "),a("code",[s._v("not-in")]),s._v(" operators are used to test whether a value is in a list. For example:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("red green blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'blue'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'yellow'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'gold'")]),s._v(" not-in "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/any.html"}},[a("code",[s._v("any?")])]),s._v(" command determines if any item in a list\nmatches a given condition.\nFor example:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Do any color names end with "e"?')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" any? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str ends-with "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Is the length of any color name less than 3?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" any? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are any scores greater than 7?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" any? "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are any scores odd?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" any? "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" mod "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/all.html"}},[a("code",[s._v("all?")])]),s._v(" command determines if every item in a list\nmatches a given condition.\nFor example:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Do all color names end with "e"?')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" all? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str ends-with "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"e"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Is the length of all color names greater than or equal to 3?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$colors")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" all? "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" str length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# true")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are all scores greater than 7?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" all? "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are all scores even?")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$scores")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" all? "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(" mod "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# false")]),s._v("\n")])])]),a("h2",{attrs:{id:"converting-the-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#converting-the-list"}},[s._v("#")]),s._v(" Converting the list")]),s._v(" "),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/flatten.html"}},[a("code",[s._v("flatten")])]),s._v(" command creates a new list from an existing list\nby adding items in nested lists to the top-level list.\nThis can be called multiple times to flatten lists nested at any depth.\nFor example:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" flatten "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [1 2 3 4 5 6]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" flatten "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" flatten "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" flatten "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# [1 2 3 4 5 6 7 8]")]),s._v("\n")])])]),a("p",[s._v("The "),a("RouterLink",{attrs:{to:"/book/commands/wrap.html"}},[a("code",[s._v("wrap")])]),s._v(" command converts a list to a table. Each list value will\nbe converted to a separate row with a single column:")],1),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("let")]),s._v(" zones "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("UTC CET Europe/Moscow Asia/Yekaterinburg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Show world clock for selected time zones")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$zones")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" wrap "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Zone'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" upsert Time "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("it"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("date now "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" to-timezone "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$it")]),s._v(".Zone "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("date")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("format")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Y.%m.%d %H:%M'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);