(window.webpackJsonp=window.webpackJsonp||[]).push([[433],{919:function(t,e,a){"use strict";a.r(e);var s=a(35),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"operators"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operators"}},[t._v("#")]),t._v(" Operators")]),t._v(" "),a("p",[t._v("Nushell supports the following operators for common math, logic, and string operations:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Operator")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("+")])]),t._v(" "),a("td",[t._v("add")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-")])]),t._v(" "),a("td",[t._v("subtract")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("*")])]),t._v(" "),a("td",[t._v("multiply")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("/")])]),t._v(" "),a("td",[t._v("divide")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("**")])]),t._v(" "),a("td",[t._v("exponentiation (power)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("mod")])]),t._v(" "),a("td",[t._v("modulo")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("==")])]),t._v(" "),a("td",[t._v("equal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!=")])]),t._v(" "),a("td",[t._v("not equal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")])]),t._v(" "),a("td",[t._v("less than")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<=")])]),t._v(" "),a("td",[t._v("less than or equal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">")])]),t._v(" "),a("td",[t._v("greater than")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v(">=")])]),t._v(" "),a("td",[t._v("greater than or equal")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("=~")])]),t._v(" "),a("td",[t._v("string contains another")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("!~")])]),t._v(" "),a("td",[t._v("string does not contain another")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("in")])]),t._v(" "),a("td",[t._v("value in list")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("not-in")])]),t._v(" "),a("td",[t._v("value not in list")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("&&")])]),t._v(" "),a("td",[t._v("and two Boolean values")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("| |")])]),t._v(" "),a("td",[t._v("or two Boolean values")])])])]),t._v(" "),a("p",[t._v("Parentheses can be used for grouping to specify evaluation order or for calling commands and using the results in an expression.")]),t._v(" "),a("h2",{attrs:{id:"order-of-operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#order-of-operations"}},[t._v("#")]),t._v(" Order of operations")]),t._v(" "),a("p",[t._v("Math operations are evaluated in the follow order (from highest precedence to lowest):")]),t._v(" "),a("ul",[a("li",[t._v("Parentheses ("),a("code",[t._v("()")]),t._v(")")]),t._v(" "),a("li",[t._v("Multiply ("),a("code",[t._v("*")]),t._v(") and Divide ("),a("code",[t._v("/")]),t._v(") and Power ("),a("code",[t._v("**")]),t._v(")")]),t._v(" "),a("li",[t._v("Add ("),a("code",[t._v("+")]),t._v(") and Subtract ("),a("code",[t._v("-")]),t._v(")")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("> 3 * (1 + 2)\n9\n")])])]),a("h2",{attrs:{id:"case-sensitivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#case-sensitivity"}},[t._v("#")]),t._v(" Case Sensitivity")]),t._v(" "),a("p",[t._v("Operators are always case-sensitive when operating on strings. In the future Nu may have simpler syntax for case-insensitive operations, but for now you can usually use the "),a("code",[t._v("str")]),t._v(" subcommands (run "),a("code",[t._v("help str")]),t._v(' for a full list). For example, this returns files whose names contain "foo" (case-sensitive):')]),t._v(" "),a("div",{staticClass:"language-nushell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ls | where name =~ "foo"\n')])])]),a("p",[t._v("And this will do the same but case-insensitive:")]),t._v(" "),a("div",{staticClass:"language-nushell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ls | where ($it.name | str contains --insensitive "foo")\n')])])])])}),[],!1,null,null,null);e.default=v.exports}}]);